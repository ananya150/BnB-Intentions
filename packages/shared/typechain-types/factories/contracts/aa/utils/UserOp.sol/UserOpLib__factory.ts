/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  UserOpLib,
  UserOpLibInterface,
} from "../../../../../contracts/aa/utils/UserOp.sol/UserOpLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "calldataKeccak",
    outputs: [
      {
        internalType: "bytes32",
        name: "ret",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100195760b5908161001f823930815050f35b600080fdfe60806040526004361015601157600080fd5b6000803560e01c631d43458514602657600080fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260a5576004359067ffffffffffffffff9081831160a5573660238401121560a557826004013591821160a557366024838501011160a5575080602460a193016080376080206040519081529081906020820190565b0390f35b80fdfea164736f6c6343000813000a";

type UserOpLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserOpLibConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserOpLib__factory extends ContractFactory {
  constructor(...args: UserOpLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<UserOpLib> {
    return super.deploy(overrides || {}) as Promise<UserOpLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserOpLib {
    return super.attach(address) as UserOpLib;
  }
  override connect(signer: Signer): UserOpLib__factory {
    return super.connect(signer) as UserOpLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserOpLibInterface {
    return new utils.Interface(_abi) as UserOpLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): UserOpLib {
    return new Contract(address, _abi, signerOrProvider) as UserOpLib;
  }
}
